#!/bin/sh

# Copyright IBM Corp. 1992, 2019. All rights reserved.
# All Rights Reserved.

# esub.mem is used when configured to be used by enabled LSB_ESUB_METHOD=mem in lsf.conf 
# This esub.mem is intended to check if bsub submission string has rusage memory reservation (-R [mem=xx]) and/or memory limit (-M).
# This script will reject submission if submission string does not specify -M xx and/or -R "rusage[mem=xx]" and REJ is set to Y. If reject is set to N its is important to set DMR and DML# If only -R "rusage[mem=xx]" specified -M will be set automatically to 25% more than -R given MFACT is set to 1.25 (.25 equals 25%)
# If only -M is set this value will be set to -R automatically and -M will be updated to 25% more than requested given MFACT is set to 1.25 (.25 equals 25%)
# If both -R and -M is set -M is updated to 25% more than -R given MFACT is set to 1.25 (.25 equals 25%) and OVER is set to Y 

# Disclaimer: 
# This code is not tested under the IBM Software Product Quality Control Standards 
# This is still Alpha code and a recommendation only for admins to improve LSF external job control capabilities
# This code may not be used on production environment


. $LSB_SUB_PARM_FILE

# Redirect stderr to stdout so echo can be used for error messages
exec 1>&2

# Memory Limit Increasing Factor (Default: 25% more than rusage). If you want to change to 10% set MFACT to 1.10. To leave it as it is set to 1.00
MFACT=1.25

# Reject Jobs if Memlimit or Mem Reservation not specified. Set REJ to N. Default REJ=Y
REJ=N

# Overide user requested both Memlimit and rusage and OVER is set to Y, memlimit is set to to rusage * MFACT. To leave user requested value untouched set OVER to N 
OVER=Y

# If you do not want to reject jobs set below default memlimit DML and default mem reservation DMR
DMR=1000
DML=1250

# If Rusage has mem defined get the memreservation and set the Mem Limit 25% more than rusage 
# When Job uses more than 25% of what reserved job will be killed if Enforcement is enabled
if [[ $LSB_SUB_RES_REQ == *"mem"* ]]; then
	memstr=${LSB_SUB_RES_REQ##*mem=}
	if [[ $memstr == *":"* ]]; then
		memstr=$(echo $memstr | cut -d ":" -f 1)
		mem=${memstr%:*}
	elif [[ $memstr == *"]"* ]]; then
		mem=${memstr%]*}
	fi

	# If the 25 percent need to be modified change 1.25 to 1.xx as per required percentage settings
	mlimit=$(echo "$mem*$MFACT" | bc)
	mlimit=$(echo $mlimit | cut -d "." -f 1)

	# If both -M and -R provided and OVER setting is Y then make any changes 
	# Updating modify file with the calculated Mem Limit
	if [[ -z $LSB_SUB_RLIMIT_RSS ]]; then 
		echo 'LSB_SUB_RLIMIT_RSS='$mlimit > $LSB_SUB_MODIFY_FILE
	else 
		if [[ $OVER == *"Y"* ]]; then 
			echo 'LSB_SUB_RLIMIT_RSS='$mlimit > $LSB_SUB_MODIFY_FILE
		fi
	fi

# If Memlimit is not set at this time rusage is also not set. A job without memlimit and rusage cannot run hence rejecting the submission
elif [[ -z $LSB_SUB_RLIMIT_RSS ]]; then 
	if [[ $REJ == *"Y"* ]]; then 
		echo "No Memory Reservation or Memory Limit Specified. Rejecting Submission use bsub -M <Max Mem> and/or -R \"rusage[mem=<Max Mem>]\""
		exit $LSB_SUB_ABORT_VALUE
	else 
		echo 'LSB_SUB_RES_REQ="rusage[mem='$DMR']"' > $LSB_SUB_MODIFY_FILE
		echo 'LSB_SUB_RLIMIT_RSS='$DML >> $LSB_SUB_MODIFY_FILE
	fi

# Rusage does not have mem provided. 
# When Memlimit is given, at this time rusage may have been provided but it may not include mem reservation. 
else 

# If rusage is empty (not provided at all) just add mem reservation
# Mem limit provided becomes rusage mem reservation and new memlimit will be 25% more than mem reservation / current memlimit
	if [[ -z $LSB_SUB_RES_REQ ]]; then 
		rusage="\"rusage[mem=${LSB_SUB_RLIMIT_RSS}]\""

# If rusage is provided but does not have mem reservation add mem reservation to existing rusage
# Mem limit provided becomes rusage mem reservation and new memlimit will be 25% more than mem reservation / current memlimit
	else 
		rusage=${LSB_SUB_RES_REQ::-1}
		rusage="\"${rusage}:mem=$LSB_SUB_RLIMIT_RSS]\""
	fi

# New mem limit is calculated at 25% of rusage or current mem limit 
mlimit=$(echo "$LSB_SUB_RLIMIT_RSS*$MFACT" | bc)
mlimit=$(echo $mlimit | cut -d "." -f 1)

#Update modifications for LSF to take in effect
echo 'LSB_SUB_RES_REQ='$rusage > $LSB_SUB_MODIFY_FILE
echo 'LSB_SUB_RLIMIT_RSS='$mlimit >> $LSB_SUB_MODIFY_FILE
fi
